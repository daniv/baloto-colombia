[project]
name = "baloto"
version = "2.1.1"
description = "Applicacion para calcular datos estadisticos en los juegos Miloto y Baloto"
authors = [
    {name = "Dani Vainstein",email = "solmarkn@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["cli", "commands", "miloto", "baloto"]
requires-python = ">=3.12,<4.0"
dependencies = [
    "pendulum (>=3.1.0,<4.0.0)",
    "rapidfuzz (>=3.13.0,<4.0.0)",
    "rich (>=14.0.0,<15.0.0)",
    "cleo (>=2.1.0,<3.0.0)",
    "pydantic (>=2.11.5,<3.0.0)",
    "glom (>=24.11.0,<25.0.0)",
    "pydantic-extra-types (>=2.10.4,<3.0.0)",
    "mypy (==1.16.0)",
    "multipledispatch (>=1.0.0,<2.0.0)",
]

[project.urls]
Repository = "https://github.com/daniv/baloto-colombia.git"

[tool.poetry]
requires-poetry = ">=2.1"
packages = [{include = "baloto", from = "src"}]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
]

[tool.poetry.scripts]
miloto = 'baloto.miloto.__main__:main'

[tool.poetry.group.test.dependencies]
pytest-cov = "^6.1.1"
pyhamcrest = "^2.1.0"
# faker = "^37.3.0"
pytest = "^8.4.0"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
mypy = "^1.15.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
minversion = "8.3"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["*_test", "test_*"]
norecursedirs = [".idea", ".pytest_cache", "src"]
enable_assertion_pass_hook = true
console_output_style = "count"
addopts = [
    "-p no:logging", "-ra", "--assert=plain", "--tb=no",
]
verbosity_assertions = 0
verbosity_test_cases = 0
log_level = "WARNING"
log_format = "%(message)s"
log_date_format = "[%X]"
logging_show_time = false
# required_plugins = "pytest-mock"

# pytest --showlocals # show local variables in tracebacks
# pytest -l           # show local variables (shortcut)
#pytest --tb=auto    # (default) 'long' tracebacks for the first and last
#                     # entry, but 'short' style for the other entries
#pytest --tb=long    # exhaustive, informative traceback formatting
#pytest --tb=short   # shorter traceback format
#pytest --tb=line    # only one line per failure
#pytest --tb=native  -> Python standard library formatting
#pytest --tb=no      -> no traceback at all

[tool.black]
line-length = 100
verbose = true

[tool.mypy]
files = "src, tests"
mypy_path = "src"
show_error_codes = true
strict = true
namespace_packages = true
explicit_package_bases = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
exclude = [
    "tests/fixtures",
    "tests/masonry/builders/fixtures",
    "tests/utils/fixtures",
]

[tool.miloto]
description = """
MiLoto es una mecánica creada por Baloto para aquellos que se la juegan por cumplir sus sueños,
donde por solo $4.000 podrán ganar un acumulado desde $120 millones
Elige tus 5 números de la suerte del 1 al 39
"""
min_number = 1
max_number = 39

[tool.miloto.testmode]
showlocals = true
maxfail = 1
newfirst = true
verbose = 0
